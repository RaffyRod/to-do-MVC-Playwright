version: 2.1

jobs:
  test:
    docker:
      - image: mcr.microsoft.com/playwright:v1.40.0-focal
    working_directory: ~/repo
    environment:
      # Playwright browsers are pre-installed in Docker image
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: true
    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package-lock.json" }}
            - v1-dependencies-

      - run:
          name: Install Java and dependencies
          command: |
            echo "‚òï Installing Java for Allure..."
            apt-get update && apt-get install -y openjdk-11-jdk
            export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
            echo "JAVA_HOME=$JAVA_HOME" >> ~/.bashrc

            echo "üì¶ Installing dependencies..."
            npm ci
            echo "‚úÖ Dependencies installed successfully"

      - run:
          name: Run linter
          command: npm run lint

      - run:
          name: Verify Playwright browsers
          command: |
            echo "üîç Verifying Playwright browsers..."
            npx playwright --version
            echo "‚úÖ Browsers are pre-installed in Docker image"

      - run:
          name: Debug environment
          command: |
            echo "üîç Debugging environment..."
            echo "Current directory: $(pwd)"
            echo "Node version: $(node --version)"
            echo "NPM version: $(npm --version)"
            echo "Playwright version: $(npx playwright --version)"
            echo "Files in current directory:"
            ls -la
            echo "Files in tests directory:"
            ls -la tests/ || echo "No tests directory"
            echo "Playwright config:"
            cat playwright.config.ts || echo "No playwright config"
          when: always

      - run:
          name: Run Playwright tests step by step
          command: |
            export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
            echo "üß™ Step 1: Clean Allure results..."
            node scripts/clean-allure-results.js

            echo "üß™ Step 2: Run Playwright tests..."
            npx playwright test --reporter=list || echo "‚ö†Ô∏è Playwright tests failed"

            echo "üß™ Step 3: Generate Allure report..."
            node scripts/generate-simple-report.js || echo "‚ö†Ô∏è Allure report generation failed"
          when: always

      - run:
          name: Check generated files
          command: |
            echo "üìÅ Checking generated files..."
            echo "Allure results:"
            ls -la allure-results/ || echo "No allure-results directory"
            echo "Test results:"
            ls -la test-results/ || echo "No test-results directory"
            echo "Allure report:"
            ls -la allure-report/ || echo "No allure-report directory"
          when: always

      - run:
          name: Deploy to GitHub Pages
          command: |
            echo "üöÄ Starting GitHub Pages deployment..."

            # Install GitHub CLI
            if ! command -v gh &> /dev/null; then
              echo "üì¶ Installing GitHub CLI..."
              # Download and install GitHub CLI directly
              curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
              apt-get update && apt-get install gh -y
            fi

            # Configure git
            git config --global user.name "CircleCI"
            git config --global user.email "circleci@example.com"

            # Clone gh-pages branch
            echo "üì• Cloning gh-pages branch..."
            if [ -d "gh-pages" ]; then
              rm -rf gh-pages
            fi
            git clone --branch gh-pages --single-branch https://github.com/RaffyRod/to-do-MVC-Playwright.git gh-pages

            # Copy report files
            echo "üìã Copying report files..."
            if [ -d "allure-report" ] && [ "$(ls -A allure-report)" ]; then
              echo "‚úÖ Found Allure report, copying..."
              cp -r allure-report/* gh-pages/
            else
              echo "‚ö†Ô∏è  No Allure report found, creating placeholder..."
              mkdir -p gh-pages
              echo "<html><body><h1>Test Report</h1><p>No report available. Check test execution logs.</p></body></html>" > gh-pages/index.html
            fi

            # Commit and push
            echo "üíæ Committing changes..."
            cd gh-pages
            git add .
            git commit -m "Update test report - $(date)" || echo "No changes to commit"

            echo "üöÄ Pushing to GitHub Pages..."
            git remote set-url origin https://$GITHUB_TOKEN@github.com/RaffyRod/to-do-MVC-Playwright.git
            git push origin gh-pages

            echo "‚úÖ Successfully deployed to GitHub Pages!"
            echo "üåê Report available at: https://raffyrod.github.io/to-do-MVC-Playwright/"
          environment:
            GITHUB_TOKEN: $GITHUB_TOKEN
          when: always

      - store_artifacts:
          path: allure-report/
          destination: allure-report
          when: always

      - store_artifacts:
          path: test-results/
          destination: test-results
          when: always

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package-lock.json" }}

workflows:
  test-and-deploy:
    jobs:
      - test:
          filters:
            branches:
              only: main
